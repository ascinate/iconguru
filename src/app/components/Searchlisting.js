'use client';
import Head from "next/head";
import NavicationHome from "./NavicationHome";
import { useEffect, useState } from "react";
import SidebarFilter from "./SidebarFilter";
import Footer from "./Footer";
import Link from "next/link";
import Image from "next/image";
import { Suspense } from 'react';
import { useSearchParams } from "next/navigation";


export default function Searchlisting() {
  const searchParams = useSearchParams();
  const [icons, setIcons] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalIcons, setTotalIcons] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [filters, setFilters] = useState({ categories: [], colors: [], types: [] });
  const [searchKeyword, setSearchKeyword] = useState("");

  // ‚úÖ On initial mount, read from query string
  useEffect(() => {
    const categoryFromQuery = searchParams.getAll("categories");
    const search = searchParams.get("search") || "";

    setFilters((prev) => ({
      ...prev,
      categories: categoryFromQuery,
    }));
    setSearchKeyword(search);
    setPage(1); // Reset page to 1 when query changes
  }, [searchParams]);

  // ‚úÖ Fetch icons after filters/search/page are set
  useEffect(() => {
    const fetchIcons = async () => {
      setIsLoading(true);
      try {
        const query = new URLSearchParams();
        query.append("page", page);
        query.append("limit", 20);

        if (filters.categories.length)
          filters.categories.forEach((c) => query.append("categories[]", c));
        if (filters.colors.length)
          filters.colors.forEach((c) => query.append("colors[]", c));
        if (filters.types.length)
          filters.types.forEach((t) => query.append("types[]", t));
        if (searchKeyword) query.append("search", searchKeyword);

        const finalURL = `https://iconsguru.com/admin/api/icons?${query.toString()}`;
        const response = await fetch(finalURL);
        const data = await response.json();

        if (data?.icons?.data && Array.isArray(data.icons.data)) {
          setIcons(data.icons.data);
          setTotalPages(data.icons.last_page || 1);
          setTotalIcons(data.icons.total || 0);
        } else {
          console.error("‚ùå Unexpected data.icons format:", data);
          setIcons([]);
        }
      } catch (error) {
        console.error("üö® Error fetching icons:", error);
        setIcons([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchIcons();
  }, [page, filters, searchKeyword]);
  

  return (
    <>
      <Head>
        <title>Listing page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavicationHome />

      <main className="listing-pages floate-start w-100">
        <div className="container">
          <div className="row">
            <div className="col-lg-3">
              <SidebarFilter onFilterChange={setFilters} />
            </div>
            <div className="col-lg-9 ps-lg-4">
              <div className="main-divs g-col-6">
                <h2 className="search-listings01">Music icons</h2>
                <p>
                  Showing <strong className="serch-data">{totalIcons}</strong> Icons
                </p>



                <div className="ser-listu-lis">
                  <div className="search-sections-home my-4 d-flex justify-content-between align-items-center bg-white">
                    <input
                      type="search"
                      className="form-control"
                      placeholder="Search icons..."
                    />
                    <button className="btn btn-search">
                      Search
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="rgba(255,255,255,1)">
                        <path d="M18.031 16.6168L22.3137 20.8995L20.8995 22.3137L16.6168 18.031C15.0769 19.263 13.124 20 11 20C6.032 20 2 15.968 2 11C2 6.032 6.032 2 11 2C15.968 2 20 6.032 20 11C20 13.124 19.263 15.0769 18.031 16.6168ZM16.0247 15.8748C17.2475 14.6146 18 12.8956 18 11C18 7.1325 14.8675 4 11 4C7.1325 4 4 7.1325 4 11C4 14.8675 7.1325 18 11 18C12.8956 18 14.6146 17.2475 15.8748 16.0247L16.0247 15.8748Z"></path>
                      </svg>
                    </button>
                  </div>
                </div>

                <div className="tabsd_divs d-inline-block w-100 mt-2">
                  <ul className="nav nav-tabs" role="tablist">
                    <li className="nav-item" role="presentation">
                      <button className="nav-link active ps-0" data-bs-toggle="tab" data-bs-target="#icons1" type="button" role="tab" aria-controls="icons1" aria-selected="true">
                        Icons
                      </button>
                    </li>
                    <li className="nav-item" role="presentation">
                      <button className="nav-link" data-bs-toggle="tab" data-bs-target="#interface" type="button" role="tab" aria-controls="interface" aria-selected="false">
                        Interface Icons
                      </button>
                    </li>
                    <li className="nav-item" role="presentation">
                      <button className="nav-link" data-bs-toggle="tab" data-bs-target="#animated" type="button" role="tab" aria-controls="animated" aria-selected="false">
                        Animated Icons
                      </button>
                    </li>
                  </ul>

                  <div className="tab-content" id="myTabContent">
                    <div className="tab-pane fade show active" id="icons1" role="tabpanel">
                      <div className="row row-cols-1 row-cols-lg-6 gy-2 g-lg-2 mt-0">
                        {isLoading ? (
                          <div className="col">
                            <div className="loading-animations">
                              <Image
                                loading="lazy"
                                src="/Spinner@1x-1.0s-200px-200px.gif"
                                alt="iconsguru"
                                width={200}
                                height={200}
                              />
                            </div>
                          </div>
                        ) : Array.isArray(icons) && icons.length > 0 ? (
                          icons.map((icon) => (
                            <article key={icon.Id} className="svg-item col position-relative">
                              <Link href={`/search/${icon.Id}`} className="btn icons-list p-0">
                                <span dangerouslySetInnerHTML={{ __html: icon.icon_svg }}></span>
                              </Link>
                              <div className="hover-divs">
                                <button type="button" className="btn btn-adds">
                                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="rgba(67,67,67,1)">
                                    <path d="M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z"></path>
                                  </svg>
                                </button>
                                <button type="button" className="btn btn-downloads">
                                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="rgba(255,255,255,1)">
                                    <path d="M13 10H18L12 16L6 10H11V3H13V10ZM4 19H20V12H22V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V12H4V19Z"></path>
                                  </svg>
                                </button>
                              </div>
                            </article>
                          ))
                        ) : (
                          <div className="col">
                            <p>No icons found.</p>
                          </div>
                        )}
                      </div>

                      {/* Pagination */}
                      <div className="d-flex align-items-center justify-content-center my-5 gap-2 flex-wrap">
                        <button
                          className="btn btn-pre"
                          onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
                          disabled={page === 1}
                        >
                          ‚Üê Previous
                        </button>

                        {[...Array(totalPages)].map((_, index) => {
                          const pageNum = index + 1;
                          return (
                            <button
                              key={pageNum}
                              onClick={() => setPage(pageNum)}
                              className={`btn btn-sm ${page === pageNum ? "btn-primary" : "btn-outline-secondary"}`}
                            >
                              {pageNum}
                            </button>
                          );
                        })}

                        <button
                          className="btn btn-next"
                          onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
                          disabled={page === totalPages}
                        >
                          Next ‚Üí
                        </button>
                      </div>
                    </div>
                    <div className="tab-pane fade" id="interface" role="tabpanel">
                      <div className="row row-cols-1 row-cols-lg-6 gy-4 g-lg-4 mt-0"></div>
                    </div>
                    <div className="tab-pane fade" id="animated" role="tabpanel">
                      ...
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </>
  );
}